import {expect} from 'chai'
import CentralHeaderDecoder from './../src/central-header-decoder'

describe('Testing central-header-decoder.js', () => {

    it('will throw signature error on decode func', () => {

        const decoder = new CentralHeaderDecoder()

        const headerBuf = Buffer.from([
            0x00, 0x4b, 0x01, 0x02, 0x3f, 0x00, 0x14, 0x00, 0x00, 0x00, 0x08, 0x00,
            0x35, 0x0e, 0xcf, 0x4e, 0xab, 0x17, 0x8a, 0xaf, 0x00, 0x00, 0x00, 0x0b,
            0x01, 0x00, 0x00, 0x0f, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x6f, 0x72, 0x65,
            0x6d, 0x69, 0x70, 0x73, 0x75, 0x6d, 0x2e, 0x74, 0x78, 0x74, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0xed, 0x3f, 0x7f, 0x73,
            0x03, 0x23, 0xd5, 0x01, 0x94, 0xd4, 0x16, 0x74, 0x03, 0x23, 0xd5, 0x01,
            0xaf, 0x06, 0x1a, 0x5e, 0x03, 0x23, 0xd5, 0x01])

        decoder.update(headerBuf)

        expect(() => decoder.decode()).to.throw()
    })

    it('will check that decode func sets offset to 0', () => {

        const decoder = new CentralHeaderDecoder()

        const headerBuf = Buffer.from([
            0x50, 0x4b, 0x01, 0x02, 0x3f, 0x00, 0x14, 0x00, 0x00, 0x00, 0x08, 0x00,
            0x35, 0x0e, 0xcf, 0x4e, 0xab, 0x17, 0x8a, 0xaf, 0x00, 0x00, 0x00, 0x0b,
            0x01, 0x00, 0x00, 0x0f, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x6f, 0x72, 0x65,
            0x6d, 0x69, 0x70, 0x73, 0x75, 0x6d, 0x2e, 0x74, 0x78, 0x74, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0xed, 0x3f, 0x7f, 0x73,
            0x03, 0x23, 0xd5, 0x01, 0x94, 0xd4, 0x16, 0x74, 0x03, 0x23, 0xd5, 0x01,
            0xaf, 0x06, 0x1a, 0x5e, 0x03, 0x23, 0xd5, 0x01])

        decoder.update(headerBuf)
        decoder.decode()

        expect(decoder._offset).to.be.equal(0)
    })

    it('will check that update func return remaining data', () => {

        const decoder = new CentralHeaderDecoder()

        const headerBuf = Buffer.from([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ])

        const additionalBuf = Buffer.from([0xFF, 0xFF, 0xFF, 0xFF, 0xFF])
        const remaminigChunk = decoder.update(Buffer.concat([headerBuf, additionalBuf], headerBuf.length + additionalBuf.length))

        expect(additionalBuf.equals(remaminigChunk)).to.be.true
    })

    it('will return null on update func if not enough data', () => {

        const decoder = new CentralHeaderDecoder()

        const headerBuf = Buffer.from([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        ])

        expect(decoder.update(headerBuf)).to.be.null
    })
})
